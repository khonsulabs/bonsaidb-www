<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - BonsaiDb Updates</title>
	<link href="https://bonsaidb.io/blog/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://bonsaidb.io/blog/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-01-27T00:00:00+00:00</updated>
	<id>https://bonsaidb.io/blog/atom.xml</id>
	<entry xml:lang="en">
		<title>BonsaiDb January update: Alpha Next Week</title>
		<published>2022-01-27T00:00:00+00:00</published>
		<updated>2022-01-27T00:00:00+00:00</updated>
		<link href="https://bonsaidb.io/blog/january-2022-update/" type="text/html"/>
		<id>https://bonsaidb.io/blog/january-2022-update/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&quot;&gt;BonsaiDb&lt;&#x2F;a&gt; is a pure Rust database that grows with you. It already is &lt;a href=&quot;&#x2F;about&quot;&gt;feature-rich&lt;&#x2F;a&gt;, but we are still working towards our initial alpha. This month&#x27;s update will highlight the changes since the last update and cover what&#x27;s remaining before our alpha release.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;highlighted-updates&quot;&gt;Highlighted updates&lt;&#x2F;h2&gt;
&lt;p&gt;I have made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;compare&#x2F;355c7904dd9b64874d99721941d2b0c0002f26b4...c1bc3ca6ce488fe8c26d265a3b1e9b8fb62d1347&quot;&gt;90 commits (+8,406&#x2F;-3,097)&lt;&#x2F;a&gt; since &lt;a href=&quot;https:&#x2F;&#x2F;community.khonsulabs.com&#x2F;t&#x2F;bonsaidb-december-update-finishing-up-alpha-1&#x2F;88&quot;&gt;last month&#x27;s update&lt;&#x2F;a&gt;. Many improvements have been made based on feedback from early adopters. Thank you to everyone who has asked a question, reported an issue, or provided any feedback!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;


&lt;a href=&quot;#Key-Value%20Store%20Optimization&quot; name=&quot;Key-Value%20Store%20Optimization&quot;&gt;
    Key-Value Store Optimization
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I firmly believe in under-promising and over-delivering. So when I was writing the &lt;a href=&quot;&#x2F;about&quot;&gt;about page&lt;&#x2F;a&gt; originally, I had to clarify in the &lt;a href=&quot;&#x2F;about&#x2F;#key-value&quot;&gt;Key-Value section&lt;&#x2F;a&gt; that the performance was limited by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;issues&#x2F;120&quot;&gt;the current design&lt;&#x2F;a&gt;. As such, I decided I would prefer to go ahead and implement the design proposed in that issue.&lt;&#x2F;p&gt;
&lt;p&gt;The Key-Value store is meant to perform atomic operations with reasonable durability. This is the primary difference between the goals of the Key-Value store and &lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;guide&#x2F;about&#x2F;concepts&#x2F;collection.html&quot;&gt;Collection&lt;&#x2F;a&gt; storage. The Key-Value store is meant to be a good alternative to running &lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt;, and Redis uses a delayed persistence design.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve copied the general design of how persistence works, except that with BonsaiDb the database isn&#x27;t kept in memory constantly. This means that BonsaiDb&#x27;s Key-Value store can contain more data than the RAM on your machine, something that is possible but not recommended with Redis.&lt;&#x2F;p&gt;
&lt;p&gt;By default, BonsaiDb will persist each operation after it&#x27;s performed. This can cause a lot of extra disk IO if thousands of operations are being performed per second. Additionally, it can cause file bloat due to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;nebari&quot;&gt;append-only file format&lt;&#x2F;a&gt; utilized. Instead, it&#x27;s recommended to &lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;guide&#x2F;administration&#x2F;configuration.html#key-value-persistence&quot;&gt;configure persistence&lt;&#x2F;a&gt; such that writes are delayed based on what you feel is a good balance for your use case. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;Storage::open(
&lt;&#x2F;span&gt;&lt;span&gt;    StorageConfiguration::new(&amp;amp;database_directory)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;key_value_persistence&lt;&#x2F;span&gt;&lt;span&gt;(KeyValuePersistence::lazy([
&lt;&#x2F;span&gt;&lt;span&gt;            PersistenceThreshold::after_changes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_duration&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            PersistenceThreshold::after_changes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;		])
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This configuration has two rules: persist after 5 seconds if there is at least 1 change, and perist if there are at least 200 changes. This means if BonsaiDb unexpectedly is killed, at most the most recent 5 seconds of changes would be lost. However, if a batch of changes is written, they will be persisted immediately.&lt;&#x2F;p&gt;
&lt;p&gt;So, how does the key-value store perform compared to Redis?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&#x2F;bonsaidb-scaleway-gp1-xs&#x2F;suite&#x2F;get-bytes&#x2F;1KiB&#x2F;report&#x2F;index.html&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&amp;#x2F;bonsaidb-scaleway-gp1-xs&amp;#x2F;suite&amp;#x2F;get-bytes&amp;#x2F;1KiB&amp;#x2F;report&amp;#x2F;violin.svg&quot; class=&quot;block-image&quot; alt=&quot;get-key 1kb&quot; style=&quot;background-color: #DDD&quot;  &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Well, as you might expect, if you don&#x27;t have network access, things go very fast -- measured in nanoseconds on my personal computer. However, the networking performance leaves something to be desired. After doing a lot of profiling, I could see that the TLS for the QUIC connection accounts for roughly 30% of the time spent. However, that still is a little slower than the WebSocket implementation, which in turn is significantly slower than Redis.&lt;&#x2F;p&gt;
&lt;p&gt;My profiling has led me to believe that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;issues&#x2F;129&quot;&gt;switching to Socketto&lt;&#x2F;a&gt; will bring the WebSocket implementation closer by reducing the number of allocations. Only time will tell if that will match Redis&#x27;s performance, but I&#x27;m hopeful it will be close enough to not care. For the QUIC connection, our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;daxpedda&quot;&gt;other major contributor&lt;&#x2F;a&gt; has plans to dig in and see what can be done to reduce some of the allocations we saw in the profiling we did.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;


&lt;a href=&quot;#Collection%20Benchmarks&quot; name=&quot;Collection%20Benchmarks&quot;&gt;
    Collection Benchmarks
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;My last &lt;a href=&quot;https:&#x2F;&#x2F;bonsaidb.io&#x2F;blog&#x2F;commerce-benchmark&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; goes into detail about a new benchmark I wrote to attempt to simulate a simple relational database workload. The results were staggering to me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bonsaidb.io&#x2F;blog&#x2F;commerce-benchmark&#x2F;&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&amp;#x2F;bonsaidb-scaleway-gp1-xs&amp;#x2F;commerce&amp;#x2F;large-writeheavy&amp;#x2F;8&amp;#x2F;LookupProduct.png&quot; class=&quot;block-image&quot; alt=&quot;find prodcut by id graph&quot;  &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nearly every operation across every workload showed all ways of accessing BonsaiDb outperforming PostgreSQL significantly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-2&quot;&gt;


&lt;a href=&quot;#Rethinking%20Serialization&quot; name=&quot;Rethinking%20Serialization&quot;&gt;
    Rethinking Serialization
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One problem that I had with BonsaiDb is that I didn&#x27;t want to force users into a specific serialization format. The base document type contains a buffer of bytes -- you can store whatever you&#x27;d like as a document. I believe our new serialization format, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;pot&quot;&gt;Pot&lt;&#x2F;a&gt;, is a great choice, but there are very good reasons to make it easy to support any serialization format.&lt;&#x2F;p&gt;
&lt;p&gt;This month I spent time creating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;transmog&quot;&gt;Transmog&lt;&#x2F;a&gt;, my take on an approach to universal serialization traits. This project aims at creating a common interface that most serialization formats could offer an implementation of. By leveraging transmog, BonsaiDb&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;main&#x2F;bonsaidb&#x2F;core&#x2F;schema&#x2F;trait.SerializedCollection.html&quot;&gt;SerializedCollection&lt;&#x2F;a&gt; trait can be used to automatically serialize and deserialize your collection types for you regardless of the format you&#x27;re storing them as. Additionally, View value serialization is now powered by Transmog, as our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;blob&#x2F;main&#x2F;examples&#x2F;view-histogram&#x2F;examples&#x2F;view-histogram.rs&quot;&gt;hdrhistogram view example&lt;&#x2F;a&gt; demonstrates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; A view for [`Samples`] which produces a histogram.
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;AsHistogram;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;View &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;AsHistogram {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Collection = Samples;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Value = SyncHistogram&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Name {
&lt;&#x2F;span&gt;&lt;span&gt;        Name::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;as-histogram&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;SerializedView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;AsHistogram {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Format = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Format {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;, SyncHistogram&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;AsHistogram {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Error = HistogramError;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;serialize_into&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;W: std::io::Write&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;SyncHistogram&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;: W,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Result&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        V2Serializer::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(value, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(HistogramError::Serialization)?;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;OwnedDeserializer&amp;lt;SyncHistogram&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;AsHistogram {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deserialize_from&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R: std::io::Read&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;: R,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Result&amp;lt;SyncHistogram&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        hdrhistogram::serialization::Deserializer::new()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; reader)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(SyncHistogram::from)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(HistogramError::Deserialization)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example shows how using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;transmog&quot;&gt;Transmog&lt;&#x2F;a&gt; we&#x27;re able to use the custom serialization functions built into the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;hdrhistogram&quot;&gt;hdrhistogram&lt;&#x2F;a&gt; crate. Querying the view returns a &lt;code&gt;Histogram&amp;lt;u64&amp;gt;&lt;&#x2F;code&gt; directly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; total_histogram = db
&lt;&#x2F;span&gt;&lt;span&gt;	.reduce::&amp;lt;AsHistogram&amp;gt;(None, AccessPolicy::UpdateBefore)
&lt;&#x2F;span&gt;&lt;span&gt;	.await?;
&lt;&#x2F;span&gt;&lt;span&gt;println!(
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;99th Percentile overall: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; samples)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;	total_histogram.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value_at_quantile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.99&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;	total_histogram.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think this example shows the inredible power of our &lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;guide&#x2F;about&#x2F;concepts&#x2F;view.html&quot;&gt;map&#x2F;reduce views&lt;&#x2F;a&gt; and the Rust type system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-3&quot;&gt;


&lt;a href=&quot;#Alpha%20coming%20next%20week&quot; name=&quot;Alpha%20coming%20next%20week&quot;&gt;
    Alpha coming next week
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I had a chat this morning with our other major contributor, (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;daxpedda&quot;&gt;@daxpedda&lt;&#x2F;a&gt;), to try to understand the implications of the breaking changes coming in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novifinancial&#x2F;opaque-ke&quot;&gt;OPAQUE-KE&lt;&#x2F;a&gt; crate. The result of the conversation was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;issues&#x2F;158&quot;&gt;this issue to implement traditional password hashing&lt;&#x2F;a&gt;. The first alpha will not contain OPAQUE as we&#x27;re going to wait until an update supporting  draft-irtf-cfrg-opaque-07 is released. This is one of the things he&#x27;s been working hard on for months, and he&#x27;s near the point where we can integrate the changes into BonsaiDb!&lt;&#x2F;p&gt;
&lt;p&gt;However, as OPAQUE is still a draft specification, there is too much possibility that things will break again in the future before being stabilized. We will help support these upgrades, but it&#x27;s not going to be the best administration experience, and it will potentially require utilizing multiple crate versions in the long run.&lt;&#x2F;p&gt;
&lt;p&gt;Once I swap out this implementation, I&#x27;m going to be creating a 0.1 branch &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&quot;&gt;in the repository&lt;&#x2F;a&gt;. We will be using the 0.x version range for our alpha and beta phases and eventually &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;issues&#x2F;137&quot;&gt;release 1.0&lt;&#x2F;a&gt; as the first stable version.&lt;&#x2F;p&gt;
&lt;p&gt;I will ask early adopters to check it out ahead of releasing to crates.io at the end of next week. I&#x27;ll send out a message on &lt;a href=&quot;https:&#x2F;&#x2F;discord.khonsulabs.com&#x2F;&quot;&gt;our Discord&lt;&#x2F;a&gt; as well as update &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;issues&#x2F;87&quot;&gt;this issue&lt;&#x2F;a&gt; once the branch is available.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, our &lt;a href=&quot;&#x2F;&quot;&gt;homepage&lt;&#x2F;a&gt; has basic getting started information including a full list of examples. I look forward to hearing what people build with BonsaiDb!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have questions or comments? Discuss this post on &lt;a href=&quot;https:&#x2F;&#x2F;community.khonsulabs.com&#x2F;t&#x2F;bonsaidb-january-update-alpha-next-week&#x2F;93&quot;&gt;our forums&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Benchmarking relational data in BonsaiDb</title>
		<published>2022-01-18T00:00:00+00:00</published>
		<updated>2022-01-18T00:00:00+00:00</updated>
		<link href="https://bonsaidb.io/blog/commerce-benchmark/" type="text/html"/>
		<id>https://bonsaidb.io/blog/commerce-benchmark/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;If you aren&#x27;t familiar with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&quot;&gt;BonsaiDb&lt;&#x2F;a&gt;, check out our &lt;a href=&quot;&#x2F;about&#x2F;&quot;&gt;What is
BonsaiDb?&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While we&#x27;re working towards our first alpha, I&#x27;ve been trying to anticipate
questions potential users might have when looking at BonsaiDb for the first
time. Although we are keeping the alpha label, we are hoping to find some
adventurous users who are excited at our vision of a database designed for and
written in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;One obvious question that almost everyone will ask at some point when hearing
about a new database: &lt;strong&gt;how does it perform?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;BonsaiDb is a unique database. It is best described as a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NoSQL&quot;&gt;NoSQL&lt;&#x2F;a&gt;
database, but traditionally NoSQL databases tend to favor eventual consistency
and speed over ACID compliance. When starting this project, I specifically
wanted to have all the guarantees PostgreSQL makes, but easier to use and deploy.&lt;&#x2F;p&gt;
&lt;p&gt;Until this past week, I knew from previous benchmarks that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;nebari&quot;&gt;Nebari&lt;&#x2F;a&gt; (our
underlying storage layer) was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;nebari&#x2F;tree&#x2F;192b6d34c6ad1350c2e469359f51423f69b1e2d4&#x2F;benchmarks&quot;&gt;pretty fast&lt;&#x2F;a&gt;, but I had no real
indicator of how BonsaiDb would perform relative to PostgreSQL.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;


&lt;a href=&quot;#Designing%20a%20Benchmark%20Suite&quot; name=&quot;Designing%20a%20Benchmark%20Suite&quot;&gt;
    Designing a Benchmark Suite
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I had three different parameters I wanted to measure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dataset size&lt;&#x2F;li&gt;
&lt;li&gt;The amount of concurrent workers&lt;&#x2F;li&gt;
&lt;li&gt;Read-heavy vs Write-heavy workloads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I decided to create a benchmark suite inspired by the needs of an ecommerce
website. The basic idea is to generate an initial data set, a list of plans for
workers to execute, and test the dataset and plans using different quantities of
workers. The operations being benchmarked are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Lookup product by id&lt;&#x2F;li&gt;
&lt;li&gt;Find product by name (exact match)&lt;&#x2F;li&gt;
&lt;li&gt;Create shopping cart&lt;&#x2F;li&gt;
&lt;li&gt;Add product to cart&lt;&#x2F;li&gt;
&lt;li&gt;Checkout&lt;&#x2F;li&gt;
&lt;li&gt;Review a product&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A single plan is generated by using probabilities to adjust how many plans
succeed in each step of the shopping process. Some plans will search for
products and never add them to a cart; Others will not only purchase the
product, but also write a review. By adjusting the probabilities of each action
occurring, we create a funnel that allows us to adjust the ratio of reads and
writes.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve written some more notes on the implementation of the benchmark itself, such
as how aggregation of ratings is handled, in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;tree&#x2F;73aa1b1e8086c23bee10cd3024bf5fcaff8ea13e&#x2F;benchmarks&#x2F;benches&#x2F;commerce#user-content-benchmark-notes&quot;&gt;benchmark&#x27;s
README&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;


&lt;a href=&quot;#BonsaiDb%20is%20faster%20than%20I%20had%20hoped%21&quot; name=&quot;BonsaiDb%20is%20faster%20than%20I%20had%20hoped%21&quot;&gt;
    BonsaiDb is faster than I had hoped!
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;These graphs show the accumulated execution time of each operation:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&#x2F;bonsaidb-scaleway-gp1-xs&#x2F;commerce&#x2F;large-writeheavy&#x2F;8&#x2F;index.html#LookupProduct&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&amp;#x2F;bonsaidb-scaleway-gp1-xs&amp;#x2F;commerce&amp;#x2F;large-writeheavy&amp;#x2F;8&amp;#x2F;LookupProduct.png&quot; class=&quot;block-image&quot; alt=&quot;lookup product by id&quot;  &#x2F;&gt;&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&#x2F;bonsaidb-scaleway-gp1-xs&#x2F;commerce&#x2F;large-writeheavy&#x2F;8&#x2F;index.html#FindProduct&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&amp;#x2F;bonsaidb-scaleway-gp1-xs&amp;#x2F;commerce&amp;#x2F;large-writeheavy&amp;#x2F;8&amp;#x2F;FindProduct.png&quot; class=&quot;block-image&quot; alt=&quot;find product by name&quot;  &#x2F;&gt;&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&#x2F;bonsaidb-scaleway-gp1-xs&#x2F;commerce&#x2F;large-writeheavy&#x2F;8&#x2F;index.html#AddProductToCart&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&amp;#x2F;bonsaidb-scaleway-gp1-xs&amp;#x2F;commerce&amp;#x2F;large-writeheavy&amp;#x2F;8&amp;#x2F;AddProductToCart.png&quot; class=&quot;block-image&quot; alt=&quot;add product to cart&quot;  &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This set of graphs is from the &amp;quot;large, write-heavy, 2 workers per core&amp;quot;
benchmark, run on a &lt;a href=&quot;https:&#x2F;&#x2F;scaleway.com&quot;&gt;Scaleway&lt;&#x2F;a&gt; GP1-XS instance running
Ubuntu 20.04 with 4 CPU cores, 16GB of RAM, and local NVME storage. The entire
suite&#x27;s results can be &lt;a href=&quot;https:&#x2F;&#x2F;khonsulabs-storage.s3.us-west-000.backblazeb2.com&#x2F;bonsaidb-scaleway-gp1-xs&#x2F;commerce&#x2F;index.html&quot;&gt;viewed here&lt;&#x2F;a&gt; as well.&lt;&#x2F;p&gt;
&lt;p&gt;As I started seeing these results, I was simply blown away. I&#x27;ve tried to be &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;tree&#x2F;73aa1b1e8086c23bee10cd3024bf5fcaff8ea13e&#x2F;benchmarks&#x2F;benches&#x2F;commerce#user-content-benchmark-notes&quot;&gt;as
fair as possible&lt;&#x2F;a&gt; in writing this benchmark suite. Over time I
plan on adding additional database backends for comparison, as well as
additional operations as BonsaiDb gains more features.&lt;&#x2F;p&gt;
&lt;p&gt;One major difference between PostgreSQL and BonsaiDb is the lack of SQL. With
BonsaiDb, the query language is Rust itself. This is why I often refer to
BonsaiDb as a &lt;em&gt;programmable database&lt;&#x2F;em&gt;. The interface for accessing your data is
how &lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;guide&#x2F;about&#x2F;concepts&#x2F;view.html&quot;&gt;you design it&lt;&#x2F;a&gt;. For example, here&#x27;s the implementation of find product:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; product = Product::load(&amp;amp;operation.name, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.database)
&lt;&#x2F;span&gt;&lt;span&gt;    .await
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Result
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Option&amp;lt;CollectionDocument&amp;lt;Product&amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rating = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    .database
&lt;&#x2F;span&gt;&lt;span&gt;    .view::&amp;lt;ProductReviewsByProduct&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_key&lt;&#x2F;span&gt;&lt;span&gt;(product.id as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_access_policy&lt;&#x2F;span&gt;&lt;span&gt;(AccessPolicy::NoUpdate)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .await
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Returns a f32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;-2&quot;&gt;


&lt;a href=&quot;#Trying%20out%20BonsaiDb&quot; name=&quot;Trying%20out%20BonsaiDb&quot;&gt;
    Trying out BonsaiDb
    &lt;i class=&quot;bi bi-link-45deg hoverable&quot;&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&quot;&gt;BonsaiDb&lt;&#x2F;a&gt; is currently labeled experimental. We are working to stabilize
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;custodian&quot;&gt;custodian-password&lt;&#x2F;a&gt;, which has involved updating many existing
crates to improve the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;novifinancial&#x2F;opaque-ke&quot;&gt;OPAQUE-KE&lt;&#x2F;a&gt;
ecosystem in Rust. After that is done, we are going to label BonsaiDb as alpha.
It hasn&#x27;t been used by many people yet, so we expect that there will be bugs and
some of those bugs might even cause loss of data. That being said, we&#x27;ve been
using it ourselves with &lt;a href=&quot;https:&#x2F;&#x2F;khonsulabs.com&#x2F;&quot;&gt;KhonsuLabs.com&lt;&#x2F;a&gt; since early
November 2021 with no issues, in addition to a couple other small test projects.&lt;&#x2F;p&gt;
&lt;p&gt;We encourage most users to wait another week or two until we have the alpha on
Crates.io, but for those looking to play with something new, we&#x27;d love any
feedback from early users. We&#x27;ve already made countless improvements to the API,
&lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;main&#x2F;bonsaidb&#x2F;&quot;&gt;documentation&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;dev.bonsaidb.io&#x2F;guide&#x2F;&quot;&gt;user&#x27;s guide&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;tree&#x2F;73aa1b1e8086c23bee10cd3024bf5fcaff8ea13e&#x2F;examples&quot;&gt;examples&lt;&#x2F;a&gt; as a result of questions from early adopters.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re interested in BonsaiDb but want to wait until we&#x27;ve released a stable
version, we invite you to subscribe to &lt;a href=&quot;&#x2F;blog&#x2F;atom.xml&quot;&gt;this site&#x27;s feed&lt;&#x2F;a&gt; or
watch the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khonsulabs&#x2F;bonsaidb&#x2F;releases&quot;&gt;repository&#x27;s releases section&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We are looking forward to seeing what types of applications BonsaiDb will power someday!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have questions or comments? Discuss this post on &lt;a href=&quot;https:&#x2F;&#x2F;community.khonsulabs.com&#x2F;t&#x2F;benchmarking-relational-data-in-bonsaidb&#x2F;91&quot;&gt;our forums&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
</feed>
